npx create-react-app reactfilenmae  --> this is the way to install the react in terminal and perform different operation
npm create vite@latest  --> this is the way to create install the react like React + Vite and perform different opereation

// rafce  --> Gives the arro function with return that is mainly used in the app.jx | app.jsx
// rfce --> gives the  function with return that is mainly used in the app.jx | app.jsx

// We are creating the custom class to undertand that hi=ow the rectElement is injected to the html containe


--------HOOKS---------
Hooks are needed in React to use state and lifecycle features inside functional components, making the code more reusable, cleaner, and easier to manage.

--> Problems Before Hooks and How Hooks Solved Them (Normal Text Format)

1. Functional components couldn’t use state or lifecycle methods.
→ Hooks like useState and useEffect allow functional components to manage state and handle side effects.

2. Class components were harder to read and maintain.
→ Hooks make the code much cleaner and easier by allowing us to write everything using functions instead of classes.

3. Sharing logic between components was difficult (using HOCs or render props became messy).
→ Hooks enable easy logic reuse through custom hooks, making code more organized.

4. Complex components became hard to manage because lifecycle logic (like componentDidMount, componentDidUpdate, etc.) was spread across multiple methods.
→ useEffect combines all related side effects in one place with clear dependencies.

5. There was confusion with the ‘this’ keyword in class components.
→ Hooks completely remove the need for this, making the code simpler and error-free.



this links helps us to get the image from the internet https://www.pexels.com/

----- Tailwind----
---> Website fot the tailwind is https://tailwindcss.com/ from here we install tailwind 

Tailwind CSS is a utility-first CSS framework, meaning it provides small reusable classes for styling instead of writing custom CSS.
##  In tailwind img tag is self closing tag so we have to make it closing by adding / before 
## In tailwind for the name of class we use className insted of class only

------props-------
Props (short for “properties”) are used to pass data from a parent component to a child component.
Why we use props:

Dynamic Content:-->Each component can show different data without duplicating code.
Reusability:-->You can reuse the same component with different props multiple times.
Parent → Child Communication:-->Props are the standard way to pass info from one component to another.

-------How Tailwind CSS and Props Work Together-------

Tailwind CSS and props complement each other:
Props define what content or data the component should display.
Tailwind defines how that content should look visually.

╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                  🌸 Tailwind CSS Quick Reference 🌸                                   ║
╠══════════════════════════════════════════════════════════════════════╣═════════════════════════════════╣
║ 🔹 Purpose                   │ 🔹 Pattern                           │  Example                        ║
╠══════════════════════════════════════════════════════════════════════╣═════════════════════════════════╣
║ Padding / Margin              │ p-{size}, m-{size}                   │ p-4, mt-2, mx-auto              ║
║ Font size / Weight            │ text-{size}, font-{weight}           │ text-lg, font-bold              ║
║ Colors                        │ {property}-{color}-{shade}           │ bg-blue-500, text-gray-700      ║
║ Flex / Grid                   │ flex, items-center, justify-between, │ grid, grid-cols-2               ║
║ Rounded corners               │ rounded-{size}                       │ rounded-lg, rounded-2xl         ║
║ Borders                       │ border, border-{color}-{shade}       │ border, border-gray-300         ║
║ Spacing between items         │ gap-{size}, space-x-{size}           │ gap-4, space-y-2                ║
║ Hover / Focus states          │ hover:{utility}                      │ hover:bg-blue-600               ║
║ Responsive design             │ {breakpoint}:{utility}               │ sm:p-2, md:grid-cols-2          ║
╚══════════════════════════════════════════════════════════════════════╝═════════════════════════════════╝
